{
 "vulnerabilities": [
  {
   "cvss": 7.4,
   "cwe": "CWE-312",
   "line": 68,
   "class": "ParameterizedQueries.cs (68:17)",
   "vul_id": "d71b8c621a603707367549767add3423",
   "method": "username = \"Mary\";",
   "column": 17,
   "description": "File contains sensitive information written directly, such as usernames, passwords, keys, etc.",
   "classMessage": "src\\IntegrationTests\\Parameterization\\ParameterizedQueries.cs (68:17)",
   "recomendation": "Credentials must not be stored in the Git code or repository. There are ‘Secrets Management’ solutions that can be used to store secrets or use Pipeline resources."
  },
  {
   "cvss": 7.4,
   "cwe": "CWE-312",
   "line": 76,
   "class": "ParameterizedQueries.cs (76:17)",
   "vul_id": "16b9d1dfd411f65eb226183513ad0580",
   "method": "username = \"Joe\";",
   "column": 17,
   "description": "File contains sensitive information written directly, such as usernames, passwords, keys, etc.",
   "classMessage": "src\\IntegrationTests\\Parameterization\\ParameterizedQueries.cs (76:17)",
   "recomendation": "Credentials must not be stored in the Git code or repository. There are ‘Secrets Management’ solutions that can be used to store secrets or use Pipeline resources."
  },
  {
   "cvss": 7.4,
   "cwe": "CWE-312",
   "line": 84,
   "class": "ParameterizedQueries.cs (84:17)",
   "vul_id": "b6338719223f8f5c8042d2ff83a9b828",
   "method": "username = \"Jane\";",
   "column": 17,
   "description": "File contains sensitive information written directly, such as usernames, passwords, keys, etc.",
   "classMessage": "src\\IntegrationTests\\Parameterization\\ParameterizedQueries.cs (84:17)",
   "recomendation": "Credentials must not be stored in the Git code or repository. There are ‘Secrets Management’ solutions that can be used to store secrets or use Pipeline resources."
  },
  {
   "cvss": 5,
   "cwe": "CWE-316",
   "line": 83,
   "class": "JsonNet.cs (83:32)",
   "vul_id": "58e55794c8aba50f2d1cbd76a54d2056",
   "method": "public string this[string key]",
   "column": 32,
   "description": "The code uses standard strings and byte arrays to store sensitive transient data, such as passwords and private encryption keys, instead of the SecureString class which is more secure because it encrypts the data at rest https://docs.microsoft. com / en-us / dotnet / api / system.security.securestring? view = netframework-4.8.",
   "classMessage": "src\\UnitTests\\Bug\\JsonNet.cs (83:32)"
  },
  {
   "cvss": 5,
   "cwe": "CWE-316",
   "line": 133,
   "class": "JsonNet.cs (133:29)",
   "vul_id": "dbb3501663fa034b34b78ca14891455a",
   "method": "public void Add(string key, string value)",
   "column": 29,
   "description": "The code uses standard strings and byte arrays to store sensitive transient data, such as passwords and private encryption keys, instead of the SecureString class which is more secure because it encrypts the data at rest https://docs.microsoft. com / en-us / dotnet / api / system.security.securestring? view = netframework-4.8.",
   "classMessage": "src\\UnitTests\\Bug\\JsonNet.cs (133:29)"
  },
  {
   "cvss": 5,
   "cwe": "CWE-316",
   "line": 148,
   "class": "JsonNet.cs (148:37)",
   "vul_id": "573e2b63ef8abc503e81845b5e948146",
   "method": "public bool ContainsKey(string key)",
   "column": 37,
   "description": "The code uses standard strings and byte arrays to store sensitive transient data, such as passwords and private encryption keys, instead of the SecureString class which is more secure because it encrypts the data at rest https://docs.microsoft. com / en-us / dotnet / api / system.security.securestring? view = netframework-4.8.",
   "classMessage": "src\\UnitTests\\Bug\\JsonNet.cs (148:37)"
  },
  {
   "cvss": 5,
   "cwe": "CWE-316",
   "line": 168,
   "class": "JsonNet.cs (168:32)",
   "vul_id": "fa2fe457eab3f4bf57edf0316d002d9f",
   "method": "public bool Remove(string key)",
   "column": 32,
   "description": "The code uses standard strings and byte arrays to store sensitive transient data, such as passwords and private encryption keys, instead of the SecureString class which is more secure because it encrypts the data at rest https://docs.microsoft. com / en-us / dotnet / api / system.security.securestring? view = netframework-4.8.",
   "classMessage": "src\\UnitTests\\Bug\\JsonNet.cs (168:32)"
  },
  {
   "cvss": 5,
   "cwe": "CWE-316",
   "line": 173,
   "class": "JsonNet.cs (173:37)",
   "vul_id": "4223a28dd2f9491f817d1e28f7569061",
   "method": "public bool TryGetValue(string key, out string value)",
   "column": 37,
   "description": "The code uses standard strings and byte arrays to store sensitive transient data, such as passwords and private encryption keys, instead of the SecureString class which is more secure because it encrypts the data at rest https://docs.microsoft. com / en-us / dotnet / api / system.security.securestring? view = netframework-4.8.",
   "classMessage": "src\\UnitTests\\Bug\\JsonNet.cs (173:37)"
  },
  {
   "cvss": 2,
   "cwe": "CWE-352",
   "line": 36,
   "class": "UseDestinationValue.cs (36:9)",
   "vul_id": "4f2b203c345151e9d6a576dfaf3d6c1a",
   "method": "public class CollectionDTOController\u003cT, K\u003e",
   "column": 9,
   "description": "The Anti-forgery token is missing. Without this validation, an attacker could send a link to the victim and, visiting the malicious link, a web page would trigger a POST request (because it is a blind attack - the attacker does not see a response to the triggered request and does not have the use of the GET request and GET requests must not change a server state by default) for the site. The victim would not be able to recognize that an action is taken in the background, but his cookie would be sent automatically if he was authenticated on the website. This attack requires no special interaction other than visiting a website.",
   "classMessage": "src\\UnitTests\\Bug\\UseDestinationValue.cs (36:9)",
   "recomendation": "To help prevent CSRF attacks, ASP.NET MVC uses anti-forgery tokens, also called request verification tokens.\n\n- The customer requests an HTML page that contains a form.\n\n- The server includes two tokens in the response. A token is sent as a cookie. The other is placed in a hidden form field. Tokens are generated randomly so that an opponent cannot guess the values.\n\nhttps://docs.microsoft.com/en-us/aspnet/web-api/overview/security/preventing-cross-site-request-forgery-csrf-attacks\n\n- When the client submits the form, he must send the two tokens back to the server. The client sends the cookie token as a cookie and sends the form token within the form data. (A browser client does this automatically when the user submits the form.)\n\n- If a request does not include both tokens, the server will not allow the request."
  },
  {
   "cvss": 2,
   "cwe": "CWE-352",
   "line": 70,
   "class": "UseDestinationValue.cs (70:9)",
   "vul_id": "ca833229c5677fbce8a89363db584772",
   "method": "public class CollectionController\u003cT, K, Z\u003e",
   "column": 9,
   "description": "The Anti-forgery token is missing. Without this validation, an attacker could send a link to the victim and, visiting the malicious link, a web page would trigger a POST request (because it is a blind attack - the attacker does not see a response to the triggered request and does not have the use of the GET request and GET requests must not change a server state by default) for the site. The victim would not be able to recognize that an action is taken in the background, but his cookie would be sent automatically if he was authenticated on the website. This attack requires no special interaction other than visiting a website.",
   "classMessage": "src\\UnitTests\\Bug\\UseDestinationValue.cs (70:9)",
   "recomendation": "To help prevent CSRF attacks, ASP.NET MVC uses anti-forgery tokens, also called request verification tokens.\n\n- The customer requests an HTML page that contains a form.\n\n- The server includes two tokens in the response. A token is sent as a cookie. The other is placed in a hidden form field. Tokens are generated randomly so that an opponent cannot guess the values.\n\nhttps://docs.microsoft.com/en-us/aspnet/web-api/overview/security/preventing-cross-site-request-forgery-csrf-attacks\n\n- When the client submits the form, he must send the two tokens back to the server. The client sends the cookie token as a cookie and sends the form token within the form data. (A browser client does this automatically when the user submits the form.)\n\n- If a request does not include both tokens, the server will not allow the request."
  },
  {
   "cvss": 2,
   "cwe": "CWE-352",
   "line": 129,
   "class": "UseDestinationValue.cs (129:9)",
   "vul_id": "9209ca6178d6994f3c49fa848f613ae8",
   "method": "public class CollectionDTOController\u003cT, K\u003e",
   "column": 9,
   "description": "The Anti-forgery token is missing. Without this validation, an attacker could send a link to the victim and, visiting the malicious link, a web page would trigger a POST request (because it is a blind attack - the attacker does not see a response to the triggered request and does not have the use of the GET request and GET requests must not change a server state by default) for the site. The victim would not be able to recognize that an action is taken in the background, but his cookie would be sent automatically if he was authenticated on the website. This attack requires no special interaction other than visiting a website.",
   "classMessage": "src\\UnitTests\\Bug\\UseDestinationValue.cs (129:9)",
   "recomendation": "To help prevent CSRF attacks, ASP.NET MVC uses anti-forgery tokens, also called request verification tokens.\n\n- The customer requests an HTML page that contains a form.\n\n- The server includes two tokens in the response. A token is sent as a cookie. The other is placed in a hidden form field. Tokens are generated randomly so that an opponent cannot guess the values.\n\nhttps://docs.microsoft.com/en-us/aspnet/web-api/overview/security/preventing-cross-site-request-forgery-csrf-attacks\n\n- When the client submits the form, he must send the two tokens back to the server. The client sends the cookie token as a cookie and sends the form token within the form data. (A browser client does this automatically when the user submits the form.)\n\n- If a request does not include both tokens, the server will not allow the request."
  },
  {
   "cvss": 2,
   "cwe": "CWE-352",
   "line": 163,
   "class": "UseDestinationValue.cs (163:9)",
   "vul_id": "4af8f4a54374efd1d89bd5ab3017fdc0",
   "method": "public class CollectionController\u003cT, K, Z\u003e",
   "column": 9,
   "description": "The Anti-forgery token is missing. Without this validation, an attacker could send a link to the victim and, visiting the malicious link, a web page would trigger a POST request (because it is a blind attack - the attacker does not see a response to the triggered request and does not have the use of the GET request and GET requests must not change a server state by default) for the site. The victim would not be able to recognize that an action is taken in the background, but his cookie would be sent automatically if he was authenticated on the website. This attack requires no special interaction other than visiting a website.",
   "classMessage": "src\\UnitTests\\Bug\\UseDestinationValue.cs (163:9)",
   "recomendation": "To help prevent CSRF attacks, ASP.NET MVC uses anti-forgery tokens, also called request verification tokens.\n\n- The customer requests an HTML page that contains a form.\n\n- The server includes two tokens in the response. A token is sent as a cookie. The other is placed in a hidden form field. Tokens are generated randomly so that an opponent cannot guess the values.\n\nhttps://docs.microsoft.com/en-us/aspnet/web-api/overview/security/preventing-cross-site-request-forgery-csrf-attacks\n\n- When the client submits the form, he must send the two tokens back to the server. The client sends the cookie token as a cookie and sends the form token within the form data. (A browser client does this automatically when the user submits the form.)\n\n- If a request does not include both tokens, the server will not allow the request."
  },
  {
   "cvss": 3,
   "cwe": "CWE-330",
   "line": 85,
   "class": "MultiThreadingIssues.cs (85:40)",
   "vul_id": "ec1f705d0e610dc10f5490b4a52fbc3c",
   "method": "static readonly Random _random = new Random();",
   "column": 40,
   "description": "The pseudo-random numbers generated are predictable. When the software generates predictable values in a context that requires unpredictability, it may be possible for an attacker to guess the next value that will be generated and use that guess to impersonate another user or access confidential information. To generate a cryptographically secure random number, such as the one suitable for creating a random password, use the RNGCryptoServiceProvider class or derive a class from System.Security.Cryptography.RandomNumberGenerator.https: //docs.microsoft.com/en-us/dotnet/ api / system.random? view = netframework-4.8",
   "classMessage": "src\\UnitTests\\Bug\\MultiThreadingIssues.cs (85:40)"
  },
  {
   "cvss": 5,
   "cwe": "CWE-316",
   "line": 431,
   "class": "Dictionaries.cs (431:24)",
   "vul_id": "721f5dcee419532bf1f31fae80702a02",
   "method": "public string Key { get; set; }",
   "column": 24,
   "description": "The code uses standard strings and byte arrays to store sensitive transient data, such as passwords and private encryption keys, instead of the SecureString class which is more secure because it encrypts the data at rest https://docs.microsoft. com / en-us / dotnet / api / system.security.securestring? view = netframework-4.8.",
   "classMessage": "src\\UnitTests\\Dictionaries.cs (431:24)"
  },
  {
   "cvss": 5,
   "cwe": "CWE-316",
   "line": 21,
   "class": "Indexers.cs (21:36)",
   "vul_id": "4c816ddc5b96e88b871e33cde0598392",
   "method": "public string this[string key] { get { return null; }}",
   "column": 36,
   "description": "The code uses standard strings and byte arrays to store sensitive transient data, such as passwords and private encryption keys, instead of the SecureString class which is more secure because it encrypts the data at rest https://docs.microsoft. com / en-us / dotnet / api / system.security.securestring? view = netframework-4.8.",
   "classMessage": "src\\UnitTests\\Indexers.cs (21:36)"
  },
  {
   "cvss": 5,
   "cwe": "CWE-316",
   "line": 22,
   "class": "MapToAttributeTest.cs (22:20)",
   "vul_id": "3f22474a78f9fcc508d10e75e1da1f8d",
   "method": "public string Key { get; set; }",
   "column": 20,
   "description": "The code uses standard strings and byte arrays to store sensitive transient data, such as passwords and private encryption keys, instead of the SecureString class which is more secure because it encrypts the data at rest https://docs.microsoft. com / en-us / dotnet / api / system.security.securestring? view = netframework-4.8.",
   "classMessage": "src\\UnitTests\\MapToAttributeTest.cs (22:20)"
  },
  {
   "cvss": 5,
   "cwe": "CWE-316",
   "line": 35,
   "class": "IncludedMappingShouldInheritBaseMappings.cs (35:20)",
   "vul_id": "00955fc05e0206a4dd2114618a9c5772",
   "method": "public string Key { get; set; }",
   "column": 20,
   "description": "The code uses standard strings and byte arrays to store sensitive transient data, such as passwords and private encryption keys, instead of the SecureString class which is more secure because it encrypts the data at rest https://docs.microsoft. com / en-us / dotnet / api / system.security.securestring? view = netframework-4.8.",
   "classMessage": "src\\UnitTests\\MappingInheritance\\IncludedMappingShouldInheritBaseMappings.cs (35:20)"
  },
  {
   "cvss": 5,
   "cwe": "CWE-316",
   "line": 74,
   "class": "IncludedMappingShouldInheritBaseMappings.cs (74:20)",
   "vul_id": "679a486803f50d3c5610a99a558f0a22",
   "method": "public string Key { get; set; }",
   "column": 20,
   "description": "The code uses standard strings and byte arrays to store sensitive transient data, such as passwords and private encryption keys, instead of the SecureString class which is more secure because it encrypts the data at rest https://docs.microsoft. com / en-us / dotnet / api / system.security.securestring? view = netframework-4.8.",
   "classMessage": "src\\UnitTests\\MappingInheritance\\IncludedMappingShouldInheritBaseMappings.cs (74:20)"
  }
 ],
 "none": 0,
 "low": 5,
 "medium": 10,
 "high": 3,
 "critical": 0,
 "total": 18,
 "sast": {
  "averageCvss": 7.4,
  "securityScore": 26,
  "size": "6571513 Bytes",
  "numberOfLines": 127046
 }
}